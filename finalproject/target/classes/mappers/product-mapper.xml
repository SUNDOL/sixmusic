<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="productMapper">
<!-- Product -->
<resultMap type="product" id="productResult">
	<result column="PRODUCT_NO" property="productNo"/>
	<result column="CATEGORY_NAME" property="category"/>
	<result column="TYPE_NAME" property="type"/>
	<result column="BRAND_NAME" property="brand"/>
	<result column="MODEL_NAME" property="model"/>
	<result column="PRODUCT_COLOR" property="color"/>
	<result column="PRODUCT_NAME" property="name"/>
	<result column="PRODUCT_CONTENT" property="content"/>
	<result column="PRODUCT_PRICE" property="price"/>
	<result column="PRODUCT_QUANTITY" property="quantity"/>
	<result column="STATUS" property="status"/>
	<result column="RATING" property="rating"/>
	<result column="COUNT" property="count"/>
	<result column="POINT" property="point"/>
	<result column="GROUP_NO" property="groupNo"/>
	<result column="CHANGE_NAME" property="changeName"/>
	<result column="FILE_PATH" property="filePath"/>
</resultMap>
<!-- ProductAttachment -->
<resultMap type="productAttachment" id="productAttachmentResult">
	<result column="PRODUCT_ATTACHMENT_NO" property="attachmentNo"/>
	<result column="REF_PRODUCT_NO" property="productNo"/>
	<result column="PRODUCT_ATTACHMENT_ORIGIN_NAME" property="originName"/>
	<result column="PRODUCT_ATTACHMENT_CHANGE_NAME" property="changeName"/>
	<result column="PRODUCT_ATTACHMENT_FILE_PATH" property="filePath"/>
</resultMap>
<!-- Review -->
<resultMap type="review" id="reviewResult">
	<result column="REVIEW_NO" property="reviewNo"/>
	<result column="REF_MEMBER_NO" property="memberNo"/>
	<result column="MEMBER_NICKNAME" property="memberNickname"/>
	<result column="REF_PRODUCT_NO" property="productNo"/>
	<result column="REVIEW_CONTENT" property="content"/>
	<result column="RATING" property="rating"/>
	<result column="CREATE_DATE" property="createDate"/>
	<result column="STATUS" property="status"/>
</resultMap>
<!-- ReviewAttachment -->
<resultMap type="reviewAttachment" id="reviewAttachmentResult">
	<result column="PRODUCT_ATTACHMENT_NO" property="attachmentNo"/>
	<result column="REF_REVIEW_NO" property="reviewNo"/>
	<result column="REVIEW_ATTACHMENT_ORIGIN_NAME" property="originName"/>
	<result column="REVIEW_ATTACHMENT_CHANGE_NAME" property="changeName"/>
	<result column="REVIEW_ATTACHMENT_FILE_PATH" property="filePath"/>
</resultMap>

<select id="listCount" resultType="_int" parameterType="filter">
	SELECT COUNT(*)
	FROM PRODUCT P
	JOIN MODEL M ON(P.REF_MODEL_NO = M.MODEL_NO)
	JOIN PRICE ON(P.PRODUCT_PRICE BETWEEN PRICE_MIN AND PRICE_MAX)
	WHERE P.STATUS LIKE 'Y'
	AND M.STATUS LIKE 'Y'
        AND P.REF_TYPE_NO LIKE #{typeNo}
        <if test="brandNo != 0">
	        AND M.REF_BRAND_NO LIKE #{brandNo}
        </if>
        <if test="modelNo != null">
	        AND P.REF_MODEL_NO IN
			<foreach collection="modelNo" item="modelNo" open="(" close=")" separator=",">
				#{modelNo}
			</foreach>
        </if>
        <if test="priceNo != null">
	        AND PRICE_NO IN 
			<foreach collection="priceNo" item="priceNo" open="(" close=")" separator=",">
				#{priceNo}
			</foreach>
        </if>
</select>

<select id="productList" parameterType="filter" resultMap="productResult">
	SELECT
        NVL(SUM(PO.QUANTITY),0) TOP_SELLERS,
		P.PRODUCT_NO,
		B.BRAND_NAME,
		P.PRODUCT_NAME,
		P.PRODUCT_PRICE,
		PAT.PRODUCT_ATTACHMENT_FILE_PATH FILE_PATH,
		PAT.PRODUCT_ATTACHMENT_CHANGE_NAME CHANGE_NAME,
		NVL(RG.RATING, 0) RATING,
		NVL(RG.COUNT, 0) COUNT
	FROM
	    PRODUCT P
	    JOIN PRODUCT_ATTACHMENT PAT ON ( P.PRODUCT_NO = PAT.REF_PRODUCT_NO )
	    JOIN PRICE PRI ON(P.PRODUCT_PRICE BETWEEN PRI.PRICE_MIN AND PRI.PRICE_MAX)
	    JOIN MODEL M ON ( P.REF_MODEL_NO = M.MODEL_NO )
	    JOIN BRAND B ON ( M.REF_BRAND_NO = B.BRAND_NO )
	    LEFT JOIN PRODUCT_ORDER PO ON(PO.REF_PRODUCT_NO = P.PRODUCT_NO)
	    LEFT JOIN REVIEW R ON( P.PRODUCT_NO = R.REF_PRODUCT_NO )
	    JOIN PRODUCT_GROUP PG ON ( P.PRODUCT_NO = PG.REF_PRODUCT_NO )
	    LEFT JOIN (
	    	SELECT
			GROUP_NO AS GROUP_NO,
			ROUND(AVG(R.RATING), 2) AS RATING,
			COUNT(R.REVIEW_NO) AS COUNT
			FROM PRODUCT_GROUP PG
			LEFT JOIN REVIEW R ON( PG.REF_PRODUCT_NO = R.REF_PRODUCT_NO )
            WHERE (R.STATUS LIKE 'Y' OR R.STATUS IS NULL)
			GROUP BY GROUP_NO
			) RG ON( PG.GROUP_NO = RG.GROUP_NO )
	WHERE P.STATUS LIKE 'Y'
	    AND PAT.PRODUCT_ATTACHMENT_CHANGE_NAME LIKE '%1.%'
	    AND P.REF_TYPE_NO LIKE #{typeNo}
        <if test="brandNo != 0">
	        AND M.REF_BRAND_NO LIKE #{brandNo}
        </if>
        <if test="modelNo != null">
	        AND P.REF_MODEL_NO IN
			<foreach collection="modelNo" item="modelNo" open="(" close=")" separator=",">
				#{modelNo}
			</foreach>
        </if>
        <if test="priceNo != null">
	        AND PRICE_NO IN 
			<foreach collection="priceNo" item="priceNo" open="(" close=")" separator=",">
				#{priceNo}
			</foreach>
        </if>
	GROUP BY
		P.PRODUCT_NO,
		B.BRAND_NAME,
		P.PRODUCT_NAME,
		P.PRODUCT_PRICE,
		PAT.PRODUCT_ATTACHMENT_FILE_PATH,
		PAT.PRODUCT_ATTACHMENT_CHANGE_NAME,
		NVL(RG.RATING, 0),
		NVL(RG.COUNT, 0)
	ORDER BY 
	<choose>
		<when test="sort == 2">
			COUNT DESC, RATING DESC, PRODUCT_NO DESC
		</when>
		<when test="sort == 3">
			RATING DESC, COUNT DESC, PRODUCT_NO DESC
		</when>
		<when test="sort == 4">
			PRODUCT_PRICE DESC, PRODUCT_NO DESC
		</when>
		<when test="sort == 5">
			PRODUCT_PRICE
		</when>
		<when test="sort == 6">
			PRODUCT_NO DESC
		</when>
		<when test="sort == 7">
			BRAND_NAME
		</when>
		<otherwise>
			TOP_SELLERS DESC, PRODUCT_NO DESC
		</otherwise>
	</choose>
</select>
<!-- 상품 추가/변경 정보 담아오기 -->
<select id="groupAdmin" parameterType="filter" resultMap="productResult">
	SELECT
        PG.GROUP_NO,
		MAX(P.PRODUCT_NAME) PRODUCT_NAME
	FROM PRODUCT P
	    JOIN MODEL M ON ( P.REF_MODEL_NO = M.MODEL_NO )
	    JOIN BRAND B ON ( M.REF_BRAND_NO = B.BRAND_NO )
	    JOIN PRODUCT_GROUP PG ON ( P.PRODUCT_NO = PG.REF_PRODUCT_NO )
	WHERE P.STATUS LIKE 'Y'
	    AND P.REF_TYPE_NO LIKE #{typeNo}
        <if test="brandNo != 0">
	        AND M.REF_BRAND_NO LIKE #{brandNo}
        </if>
        <if test="modelNo != null">
	        AND P.REF_MODEL_NO IN
			<foreach collection="modelNo" item="modelNo" open="(" close=")" separator=",">
				#{modelNo}
			</foreach>
        </if>
	GROUP BY PG.GROUP_NO
	ORDER BY PG.GROUP_NO
</select>
<select id="productAdmin" parameterType="_int" resultMap="productResult">
    SELECT P.PRODUCT_NO,
    P.PRODUCT_COLOR
    FROM PRODUCT P
    JOIN PRODUCT_GROUP PG ON(P.PRODUCT_NO = PG.REF_PRODUCT_NO)
    WHERE PG.GROUP_NO LIKE #{groupNo}
</select>
<select id="detailAdmin" parameterType="_int" resultMap="productResult">
    SELECT
		P.PRODUCT_NAME,
		P.PRODUCT_PRICE,
        P.PRODUCT_QUANTITY,
        P.PRODUCT_CONTENT,
        P.PRODUCT_COLOR,
		PAT.PRODUCT_ATTACHMENT_FILE_PATH FILE_PATH,
		PAT.PRODUCT_ATTACHMENT_CHANGE_NAME CHANGE_NAME,
        B.BRAND_NAME
	FROM PRODUCT P
    JOIN PRODUCT_ATTACHMENT PAT ON(P.PRODUCT_NO = PAT.REF_PRODUCT_NO) 
    JOIN MODEL M ON ( P.REF_MODEL_NO = M.MODEL_NO )
    JOIN BRAND B ON ( M.REF_BRAND_NO = B.BRAND_NO )
    WHERE PAT.PRODUCT_ATTACHMENT_CHANGE_NAME LIKE '%-1.%'
    AND P.PRODUCT_NO LIKE #{productNo}
</select>
<!-- 상품 정보 -->
<select id="selectProductAttachmentList" resultMap="productAttachmentResult">
	SELECT
		REF_PRODUCT_NO ,
		PRODUCT_ATTACHMENT_ORIGIN_NAME ,
		PRODUCT_ATTACHMENT_CHANGE_NAME ,
		PRODUCT_ATTACHMENT_FILE_PATH 
	FROM PRODUCT_ATTACHMENT
	WHERE REF_PRODUCT_NO LIKE #{productNo}
	ORDER BY PRODUCT_ATTACHMENT_NO
</select>

<select id="productDetails" parameterType="product" resultMap="productResult">
SELECT
    product_no,
    model_name,
    brand_name,
    g.group_no,
    product_color,
    product_name,
    product_content,
    product_price,
    product_quantity,
    nvl(RG.RATING, 0) as RATING,
    RG.COUNT
FROM
         product p
    JOIN model         m ON ( p.ref_model_no = m.model_no )
    JOIN brand         b ON ( m.ref_brand_no = b.brand_no )
    JOIN product_group g ON ( p.product_no = g.ref_product_no )
    LEFT JOIN (
	    	SELECT
			GROUP_NO AS GROUP_NO,
			ROUND(AVG(R.RATING), 2) AS RATING,
			COUNT(R.REVIEW_NO) AS COUNT
			FROM PRODUCT_GROUP PG
			JOIN REVIEW R ON( PG.REF_PRODUCT_NO = R.REF_PRODUCT_NO )
            WHERE (R.STATUS LIKE 'Y' OR R.STATUS IS NULL)
			GROUP BY GROUP_NO
			) RG ON( g.GROUP_NO = RG.GROUP_NO )
WHERE
    product_no = #{productNo} 
</select>

<select id="productPics" resultMap="productAttachmentResult">
SELECT
    *
FROM
    product_attachment
WHERE
    ref_product_no = #{productNo}
</select>

<select id="productColors" resultMap="productAttachmentResult">
SELECT
    *
FROM
         product_attachment pat
    JOIN product       p ON ( pat.ref_product_no = p.product_no )
    JOIN product_group pg ON ( p.product_no = pg.ref_product_no )
WHERE
    pg.group_no LIKE (
        SELECT
            group_no
        FROM
            product_group
        WHERE
            ref_product_no LIKE #{productNo}
    )
    AND pat.product_attachment_change_name LIKE '%-1.%'
</select>

<select id="productReviewList" parameterType="review" resultMap="reviewResult">
SELECT
    r.review_no,
    r.ref_member_no,
    m.member_nickname,
    r.rating
FROM
         review r
    JOIN product           p ON ( r.ref_product_no = p.product_no )
    JOIN product_group     pg ON ( pg.ref_product_no = p.product_no )
    JOIN member            m ON ( r.ref_member_no = m.member_no )
WHERE
    pg.group_no LIKE (
        SELECT
            group_no
        FROM
            product_group
        WHERE
            ref_product_no LIKE #{productNo}
    )
    and r.status = 'Y'
ORDER BY
    review_no DESC
</select>

<select id="reviewDetails" resultType="_int" resultMap="reviewResult">
SELECT
    r.review_no,
    m.member_nickname,
    r.ref_product_no,
    r.review_content,
    r.rating,
    r.create_date
FROM
         review r
    JOIN member m ON ( m.member_no = r.ref_member_no )
WHERE
        r.review_no = #{reviewNo}
    AND r.status = 'Y'
</select>

<select id="reviewDetailsPic" resultType="_int" resultMap="reviewAttachmentResult">
SELECT
    review_attachment_no,
    ref_review_no,
    review_attachment_origin_name,
    review_attachment_change_name,
    review_attachment_file_path
FROM
    review_attachment
WHERE
    ref_review_no = #{reviewNo}
</select>

</mapper>
