<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	<resultMap type="member" id="memberMap">
		<result column="MEMBER_NO" property="memberNo"/>
		<result column="REF_TYPE_NO" property="typeNo"/>
		<result column="MEMBER_ID" property="memberId"/>
		<result column="MEMBER_PWD" property="memberPwd"/>
		<result column="MEMBER_NAME" property="memberName"/>
		<result column="MEMBER_NICKNAME" property="memberNickname"/>
		<result column="REF_GRADE_NO" property="gradeNo"/>
		<result column="BIRTHDAY" property="birthday"/>
		<result column="ZIPCODE" property="zipcode"/>
		<result column="ADDRESS_1" property="address1"/>
		<result column="ADDRESS_2" property="address2"/>
		<result column="ADDRESS_3" property="address3"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="POINT" property="point"/>
		<result column="PHONE" property="phone"/>
		<result column="STATUS" property="status"/>
	</resultMap>
	<resultMap type="review" id="reviewResult">
		<result column="REVIEW_NO" property="reviewNo"/>
		<result column="REF_MEMBER_NO" property="memberNo"/>
		<result column="MEMBER_NICKNAME" property="memberNickname"/>
		<result column="REF_PRODUCT_NO" property="productNo"/>
		<result column="REVIEW_CONTENT" property="content"/>
		<result column="RATING" property="rating"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="STATUS" property="status"/>
	</resultMap>
	<resultMap type="reviewAttachment" id="reviewAttachmentResult">
		<result column="PRODUCT_ATTACHMENT_NO" property="attachmentNo"/>
		<result column="REF_REVIEW_NO" property="reviewNo"/>
		<result column="REVIEW_ATTACHMENT_ORIGIN_NAME" property="originName"/>
		<result column="REVIEW_ATTACHMENT_CHANGE_NAME" property="changeName"/>
		<result column="REVIEW_ATTACHMENT_FILE_PATH" property="filePath"/>
	</resultMap>
	
	<select id="loginMember" resultMap="memberMap">
	SELECT
	    member_no,
	    ref_type_no,
	    member_id,
	    member_pwd,
	    member_name,
	    member_nickname,
	    ref_grade_no,
	    to_char(birthday, 'yyyymmdd') as birthday,
	    zipcode,
	    address_1,
	    address_2,
	    address_3,
	    point,
	    phone
	FROM
	    member
	WHERE
	        member_id = #{memberId}
	    AND member_pwd = #{memberPwd}
	    AND status = 'Y'
	</select>
	<select id="nicknameCheck" resultType="int" parameterType="String">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE MEMBER_NICKNAME = #{memberNickname}
	</select>
	<select id="idCheck" parameterType="string">
		SELECT COUNT(*) 
		FROM MEMBER 
		WHERE MEMBER_ID LIKE #{memberId}
	</select>
	<insert id="signUpMember" parameterType="member">
		INSERT INTO MEMBER (MEMBER_NO, MEMBER_ID, REF_TYPE_NO, MEMBER_PWD, MEMBER_NICKNAME, MEMBER_NAME, PHONE, BIRTHDAY, ZIPCODE, ADDRESS_1, ADDRESS_2, ADDRESS_3)
		VALUES (SEQ_MEMBER.NEXTVAL, #{memberId}, #{typeNo}, #{memberPwd}, #{memberNickname}, #{memberName}, #{phone}, #{birthday}, #{zipcode}, #{address1}, #{address2}, #{address3})	
	</insert>

	<resultMap type="totalOrder" id="totalOrderResult">
		<result column="ORDER_NO" property="orderNo"/>
		<result column="REF_MEMBER_NO" property="memberNo"/>
		<result column="ORDER_DATE" property="orderDate"/>
		<result column="PAYMENT" property="payment"/>
		<result column="STATUS" property="status"/>
	</resultMap>
	<!-- product -->
	<resultMap type="product" id="productResult">
		<result column="PRODUCT_NO" property="productNo"/>
		<result column="PRODUCT_NAME" property="name"/>
		<result column="PRODUCT_PRICE" property="price"/>
		<result column="PRODUCT_COLOR" property="color"/>
		<result column="QUANTITY" property="quantity"/>
		<result column="MODEL_NAME" property="model"/>
		<result column="BRAND_NAME" property="brand"/>
		<result column="CHANGE_NAME" property="changeName"/>
		<result column="FILE_PATH" property="filePath"/>
		<result column="COUNT" property="count"/>
		<result column="REF_ORDER_NO" property="refOrderNo"/>
	</resultMap>
	<!-- 주문 상품 갯수 -->
	<select id="orderListCount" parameterType="_int" resultType="_int">
		SELECT COUNT(*)
		FROM PRODUCT_ORDER PO
		JOIN TOTAL_ORDER O ON(PO.REF_ORDER_NO = O.ORDER_NO)
		WHERE O.REF_MEMBER_NO LIKE #{memberNo}
	</select>
	<!-- 마지막 주문 조회 -->
	<select id="viewLastTotalOrder" parameterType="_int" resultMap="totalOrderResult">
		SELECT 
			ORDER_NO, 
			PAYMENT, 
			ORDER_DATE 
        FROM TOTAL_ORDER
		WHERE STATUS LIKE 'Y'
		AND REF_MEMBER_NO LIKE #{memberNo}
		AND ORDER_NO LIKE (
		    SELECT MAX(ORDER_NO) 
		    FROM TOTAL_ORDER 
		    WHERE REF_MEMBER_NO LIKE #{memberNo}
	    )
		ORDER BY ORDER_NO DESC
	</select>
	
	<!-- 주문 조회 -->
	<select id="viewTotalOrder" parameterType="java.util.HashMap" resultMap="totalOrderResult">
		SELECT ORDER_NO, PAYMENT, ORDER_DATE 
		FROM TOTAL_ORDER
		WHERE STATUS LIKE 'Y'
		AND REF_MEMBER_NO LIKE #{memberNo}
		AND ORDER_NO IN
			<foreach collection="orderNo" item="orderNo" open="(" close=")" separator=",">
				#{orderNo}
			</foreach>
		ORDER BY ORDER_NO DESC
	</select>
	<!-- 마지막 주문 내역 조회 -->
	<select id="viewLastProductOrder" parameterType="_int" resultMap="productResult">
		SELECT 
            NVL2(PG.REF_PRODUCT_NO,1,0) COUNT,
			P.PRODUCT_NO,
			P.PRODUCT_NAME,
			P.PRODUCT_PRICE,
			P.PRODUCT_COLOR,
			PO.REF_ORDER_NO,
            PO.QUANTITY,
			M.MODEL_NAME,
			B.BRAND_NAME,
			PAT.PRODUCT_ATTACHMENT_FILE_PATH FILE_PATH,
			PAT.PRODUCT_ATTACHMENT_CHANGE_NAME CHANGE_NAME
		FROM PRODUCT P
		JOIN PRODUCT_ATTACHMENT PAT ON(PAT.REF_PRODUCT_NO = P.PRODUCT_NO)
		JOIN PRODUCT_ORDER PO ON(PO.REF_PRODUCT_NO = P.PRODUCT_NO)
		JOIN TOTAL_ORDER O ON(O.ORDER_NO = PO.REF_ORDER_NO)
		JOIN MODEL M ON(M.MODEL_NO = P.REF_MODEL_NO)
		JOIN BRAND B ON(B.BRAND_NO = M.REF_BRAND_NO)
        LEFT JOIN (SELECT REF_PRODUCT_NO
            FROM PRODUCT_GROUP
            WHERE GROUP_NO IN(
                SELECT GROUP_NO
                FROM PRODUCT_GROUP
                WHERE REF_PRODUCT_NO IN(
                    SELECT REF_PRODUCT_NO                      
                    FROM REVIEW 
                    WHERE STATUS LIKE 'Y'
                    AND REF_MEMBER_NO LIKE #{memberNo}
                )
            )
        )PG ON(PG.REF_PRODUCT_NO = P.PRODUCT_NO)
		WHERE O.REF_MEMBER_NO LIKE #{memberNo}
		AND O.STATUS LIKE 'Y'
		AND ORDER_NO LIKE (
		    SELECT MAX(ORDER_NO) 
		    FROM TOTAL_ORDER 
		    WHERE REF_MEMBER_NO LIKE #{memberNo}
	    )
        AND PAT.PRODUCT_ATTACHMENT_CHANGE_NAME LIKE '%-1.%'
		ORDER BY O.ORDER_NO DESC, P.PRODUCT_PRICE DESC
	</select>
	<!-- 주문 내역 조회 -->
	<select id="viewProductOrder" parameterType="_int" resultMap="productResult">
		SELECT 
            NVL2(PG.REF_PRODUCT_NO,1,0) COUNT,
			P.PRODUCT_NO,
			P.PRODUCT_NAME,
			P.PRODUCT_PRICE,
			P.PRODUCT_COLOR,
			PO.REF_ORDER_NO,
            PO.QUANTITY,
			M.MODEL_NAME,
			B.BRAND_NAME,
			PAT.PRODUCT_ATTACHMENT_FILE_PATH FILE_PATH,
			PAT.PRODUCT_ATTACHMENT_CHANGE_NAME CHANGE_NAME
		FROM PRODUCT P
		JOIN PRODUCT_ATTACHMENT PAT ON(PAT.REF_PRODUCT_NO = P.PRODUCT_NO)
		JOIN PRODUCT_ORDER PO ON(PO.REF_PRODUCT_NO = P.PRODUCT_NO)
		JOIN TOTAL_ORDER O ON(O.ORDER_NO = PO.REF_ORDER_NO)
		JOIN MODEL M ON(M.MODEL_NO = P.REF_MODEL_NO)
		JOIN BRAND B ON(B.BRAND_NO = M.REF_BRAND_NO)
        LEFT JOIN (SELECT REF_PRODUCT_NO
            FROM PRODUCT_GROUP
            WHERE GROUP_NO IN(
                SELECT GROUP_NO
                FROM PRODUCT_GROUP
                WHERE REF_PRODUCT_NO IN(
                    SELECT REF_PRODUCT_NO                      
                    FROM REVIEW 
                    WHERE STATUS LIKE 'Y'
                    AND REF_MEMBER_NO LIKE #{memberNo}
                )
            )
        )PG ON(PG.REF_PRODUCT_NO = P.PRODUCT_NO)
		WHERE O.REF_MEMBER_NO LIKE #{memberNo}
		AND O.STATUS LIKE 'Y'
        AND PAT.PRODUCT_ATTACHMENT_CHANGE_NAME LIKE '%-1.%'
		ORDER BY O.ORDER_NO DESC, P.PRODUCT_PRICE DESC
	</select>
	<!-- 리뷰 생성 -->
	<insert id="addToReview" parameterType="Review">
		INSERT INTO REVIEW(
			REVIEW_NO ,
			REF_MEMBER_NO ,
			REF_PRODUCT_NO ,
			REVIEW_CONTENT ,
			RATING
		)
		VALUES(
			SEQ_REVIEW.NEXTVAL,
			#{memberNo}, 
			#{productNo}, 
			#{content},
			#{rating}
		)
	</insert>
	<!-- 리뷰 사진 생성  -->
	<insert id="addToReviewImage" parameterType="ReviewAttachment">
		INSERT INTO REVIEW_ATTACHMENT(
			REVIEW_ATTACHMENT_NO,
		    REF_REVIEW_NO ,
		    REVIEW_ATTACHMENT_ORIGIN_NAME ,
		    REVIEW_ATTACHMENT_CHANGE_NAME ,
		    REVIEW_ATTACHMENT_FILE_PATH
		)
		VALUES(
			SEQ_REVIEW_ATTACHMENT.NEXTVAL,
			SEQ_REVIEW.CURRVAL,
			#{originName},
			#{changeName},
			#{filePath}
		)
	</insert>
	<!-- 리뷰 수정 전 조회 -->
	<select id="showReview" resultType="_int" resultMap="reviewResult">
	SELECT
	    r.review_no,
	    m.member_nickname,
	    r.ref_product_no,
	    r.review_content,
	    r.rating,
	    r.create_date
	FROM
         review r
    	JOIN member m ON ( m.member_no = r.ref_member_no )
	WHERE
        m.member_no = #{memberNo}
        AND r.ref_product_no = #{productNo}
    	AND r.status = 'Y'
	</select>
	<select id="showReviewPics" resultType="_int" resultMap="reviewAttachmentResult">
	SELECT
	    review_attachment_no,
	    ref_review_no,
	    review_attachment_origin_name,
	    review_attachment_change_name,
	    review_attachment_file_path
	FROM
    	review_attachment
	WHERE
    	ref_review_no = #{reviewNo}
	</select>
	
	<!-- 리뷰 삭제 -->
	<update id="removeReview" parameterType="review">
		UPDATE REVIEW
		SET STATUS = 'N'
		WHERE REF_MEMBER_NO LIKE #{memberNo}
		AND REVIEW_NO LIKE #{reviewNo}
	</update>
	<!-- 회원정보 변경 -->
	<update id="updateAccount" parameterType="member">
		UPDATE MEMBER
		SET 
		<trim prefixOverrides=",">
			<if test="memberName != null">
				MEMBER_NAME = #{memberName}
			</if>
			<if test="memberNickname != null">
				,MEMBER_NICKNAME = #{memberNickname}
			</if>
			<if test="birthday != null">
				,BIRTHDAY = #{birthday}
			</if>
			<if test="zipcode != null">
				,ZIPCODE = #{zipcode}
				,ADDRESS_1 = #{address1}
				,ADDRESS_2 = #{address2}
				,ADDRESS_3 = #{address3}
			</if>
			<if test="phone != null">
				,PHONE = #{phone}
			</if>
		</trim>
		WHERE MEMBER_NO LIKE #{memberNo}
	</update>
	<!-- 회원 비밀번호 수정 -->
	<update id="updateMemberPwd" parameterType="member">
		UPDATE MEMBER
		SET MEMBER_PWD = #{memberPwd}
		WHERE MEMBER_NO LIKE #{memberNo}
	</update>
	<update id="deleteMember" parameterType="member">
		UPDATE MEMBER
		SET STATUS = 'N'
		WHERE MEMBER_NO LIKE #{memberNo}
	</update>
	
	
</mapper>